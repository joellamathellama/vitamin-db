//babelify vs reactify

=================
index.js
=================

- browserify -- bundles multiple files together to minimize http requests, has many options to bundle various ways

- express - create a server / handles server stuff

- Path - is a native Node.js module, contains utilities for handling and transforming file paths.

- Middleware - middleware functions are functions that have access to the request objects (req and res), and the next middleware function in the req/res cycle. All to do with requests.

routes.get('/app-bundle.js',
  browserify('./client/app.js'))

  - finds /client/app.js and compiles into app-bundle.js, which is loaded into the browser

Express router
	- A router obj is an "isolated instance of middleware and routes"
	- Can think of it like a "mini-app", capable only of performing middleware and routing function.
	- ** Every Express app has a built-in app router **
	- ACTION: Keep looking into express routers -- not completely clear on their purpose / delineation between them and an app instance, etc.

var app = express()
	-- Creating an instance of express (1 main instance for the app)
	-- uses body-parser module to parse incoming request bodies as JSON
	- mounts the main router (defined by us earlier in the file)

=================
Work on DB 
=================

We did:
1. initdb db/
2. createdb med_dev

To run:
1. In one terminal window, run "postgres -D db/"
	- Leave the process running.
2. In another terminal window, run "psql med_dev". 
	- This is the window to interact with the db. 


Phone numbers - integer or string?
Validatoin for email addresses


=================
Seed DB
=================

1. Drop the database
	//=> 'dropdb med_dev'
2. Create the database
	//=> 'createdb med_dev'
3. Start the database, and leave running.
	//=>  'psql med_dev'
4. In separate terminal window, start the server, which will initialize the schema.
	//=>  'npm start'
5. In separate terminal window, seed the db.
	//=>  'knex --env development seed:run'


===============
Set Up Test Database (will only have to run this once on your computer)
===============

1. Drop the database (if exists)
   //=> 'dropdb test'
2. Create the database
   //=> 'createdb test'
3. Initialize the schema: 
   //=> 'NODE_ENV=test node server/index.js'
4. Quit out of Node
   //=> CTRL + c
Can now run tests: 'npm test'

============
Test Authentication Without Client (Using Postman)
============

Try going to the following without token ==> should get in response body:
GET localhost:4000/hello ==> expect('Hello! Please log in')
GET localhost:4000/check ==> expect({msg: 'please log in'})
GET localhost:4000/anything-else-not-on-authenticate-route ==> expect({msg: 'please log in'})

Now get a token:
To use user account already in db:
POST localhost:4000/authenticate/login with body raw text: {"username": "YOUR STORED USERNAME", "password": "YOUR STORED PW"}
    ==> expect({token: YOUR TOKEN}) if your password is right
To make an account:
POST localhost:4000/authenticate/signup with body raw text: {"username": "YOUR NEW USERNAME", 
                                                             "password": "YOUR NEW PW",
                                                             "email": "YOUR NEW EMAIL",
                                                             "phone": "YOUR NEW PHONE NUMBER"
                                                            }
    ==> expect({token: YOUR TOKEN})

Add to headers: x-access-token : YOUR TOKEN
Now try the following routes:
GET localhost:4000/hello ==> expect('Hello! Please log in')
GET localhost:4000/check ==> expect('Hello YOUR USERNAME !')
GET localhost:4000/anything-else-not-on-authenticate-route ==> expect('Hello world!')

=========
Notes 3/4
========

need to write functionality to run seeding
started writing server tests in index_test.js 
- need to get db.deleteEverything() working properly, if it is not
- migrations not working for unknown reasons
May be running test envirionment; alternatively, node may be working/not working sporadically with no correlation to our actions


======
Notes 3/5
=====

Working on getting a User model to:
1) instantiate based on model-helper prototype
2) flow into test correctly
3) pass tests
- once this works, structure should be able to be copied and used by other models


=====
Notes 3/8
=====
Other methods to write:
- User: get all doctors associated with user << User.findAllDoctors; User.findAllDoctorsOfType
- Doctor: given an array of doctors, filter out types
- ** need some way for users to enter doctors in the order they went to them... can't do it by 'created at'

=====
Notes 3/16: Auth
=====

Using req.query for redirects. If someone copy/pasted from the URL they could be in someone else's account
- We check to see if the token matches a valid token that has not expired yet
  - If yes, we give the user their data based on the information encoded in the token
-


=====
Notes 3/16:
Model tests / models / api test / api
=====

Allergy:

  ==============
  API
  ==============

  // ASSUME ALL BELOW NEED TO EXTEND TO ALL DATA TYPES //////////

  AllergyAPI.get('/' ...)
    - Retrieve all allergy records associated with a user

  AllergyAPI.post('/' ...)
    - Use Allergy.create fn

  AllergyAPI.put('/' ...)
    -- Have the identifying info and what needs to be changed
      inside an object sent as put request here.

  AllergyAPI.delete('/' ...)
    -- use the id and use Allergy.deleteById fn

  /////////////////////////////////////////////////////////////////

  ==============
  Model
  ==============

Auth:

  ==============
  API
  ==============


  ==============
  Model
  ==============
 

Doctor:

  ==============
  API
  ==============

  If you're adding a doctor, and the doctor is current: true, and that doctor's
  type_usermade, "primary doctor", is already associated with an existing doctor
  record, then...

    - Front-end messaging(?):
      -- If you add a doctor and it overlaps with another doctor (described above),
      display helper text that the user may want to set the older doctor to current:false


  ==============
  Model
  ==============


EyeRx:

  ==============
  API
  ==============

  For now, whenever you add a new eyerx record, it should be set to current:true,
  and the previously current record shoudl be set to current:false

  FUTURE FEATURE NOTES: ///////////////////////////////////

  You only have one current eye prescription. 

    --If you add a new eyerx, that should be set to current:true,
    -- Previous eyerx should be set to current:false;

  Also should be able to add old eyerx as well.

    -- Front-end note: User should be able to set current: true/false when they
      input a new eyerx

  ==============
  Model
  ==============


FamilyHistory:

  ==============
  API
  ==============

  FamilyHistoryAPI.get('/' ...)
    - Retrieve all family history (condition) records associated with a user

  FamilyHistoryAPI.post('/' ...)
    - Use Allergy.create fn

  FamilyHistoryAPI.put('/' ...)
    -- Have the identifying info and what needs to be changed
      inside an object sent as put request here.

  FamilyHistoryAPI.delete('/' ...)
    -- use the id and use Allergy.deleteById fn


  Front-end note: 
    -- On the front-end, users can only create/edit/delete family members.
    -- They can only add a condition associated with an existing family member
      record.

    1) Click edit (associated with family member)
    2) "x"s appear by each condition and the family member, AND an "add" button 
       will appear, to add new conditions
    3) "x" will delete either:
      3a) Associated condition
      3b) Family member record, AND all associated conditions
    4) Clicking the "add" button should pop up a dialog box, where the user can 
       input the new condition, and submit it.
       4a) The condition should render upon submission.


  ==============
  Model
  ==============


FamilyMembers:

Insurance:

Pharmacy:

Rx:

User-Doctor:

User:



  ==============
  VARIABLE EXPORTS FOR DEV
  ==============

  In production, the Twilio config vars are set. 

  For development:
    (In the terminal window you're going to run the server in)
    --> export the variables like so (filling in the values with our project keys):

        export TWILIO_ACCOUNT_SID=
        export TWILIO_AUTH_TOKEN=
        export TWILIO_TWILIO_NUMBER=

